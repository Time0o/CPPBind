#!/usr/bin/env python3

import argparse
import logging
import os
import re
import subprocess
import sys
import unittest

from functools import partial
from timeit import default_timer


def logger_create(name):
    logging.basicConfig(format='%(levelname)s %(message)s')

    return logging.getLogger(name)


def logger_set_verbosity(logger, verbosity):
    logger.verbosity = verbosity

    if verbosity > 1:
        logger.setLevel(logging.DEBUG)
    elif verbosity > 0:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.WARN)


log = logger_create('backend_testrunner')


class BackendTestGenerator:
    INPUT_DIR = '_input'
    OUTPUT_ROOT_DIR = '_output'

    TEST_INPUT_PATTERN = 'test_(.*)\..*'
    TEST_PATTERN = 'test_(.*)\..*'

    def __init__(self, **kwargs):
        self._test_lang = kwargs['test_language']

        self._test_root_dir = kwargs['test_root_dir']

        self._test_input_dir = os.path.join(self._test_root_dir,
                                            self.INPUT_DIR)

        self._test_output_root_dir = os.path.join(self._test_root_dir,
                                                  self.OUTPUT_ROOT_DIR)

        single_test = kwargs.get('single_test')

        if single_test is not None:
            self._tests = [single_test]
        else:
            self._tests = self._parse_tests(self._parse_test_inputs())

    def list_tests(self):
        return self._tests

    def wrap_tests(self, **kwargs):
        log.info("wrapping test inputs...")

        output_dir = self._test_output_dir()

        if not os.path.isdir(output_dir):
            os.mkdir(output_dir)

        for test in self._tests:
            test_input = self._test_input(test)

            log.debug(f"wrapping {test_input}...")

            self._subprocess([
                kwargs['cppbind'],
                *self._clang_args('cppbind', **kwargs),
                test_input,
                '--backend', f'{self._test_lang}',
                '--wrap-rule', 'const:hasAncestor(namespaceDecl(hasName("test")))',
                '--wrap-rule','function:hasAncestor(namespaceDecl(hasName("test")))',
                '--wrap-rule','record:hasAncestor(namespaceDecl(hasName("test")))',
                '--wrap-macro-constants',
                '--output-directory', f'{output_dir}',
                '--'
            ])

    def compile_tests(self, **kwargs):
        log.info("compiling tests...")

        if self._test_lang == 'c':
            compile_cmd = self._compile_c_test
        elif self._test_lang == 'rust':
            compile_cmd = self._compile_rust_test
        elif self._test_lang == 'lua':
            compile_cmd = self._compile_lua_test

        for test in self._tests:
            log.debug(f"compiling {test}...")

            compile_cmd(test, **kwargs)

    def run_tests(self, **kwargs):
        log.info("running tests...")

        class BackendTests(unittest.TestCase):
            __qualname__ = f'BackendTests'

        if self._test_lang == 'c':
            run_test = self._run_c_test
        elif self._test_lang == 'rust':
            run_test = self._run_rust_test
        elif self._test_lang == 'lua':
            run_test = self._run_lua_test

        for test in self._tests:
            def run_test_closure(_, run_test=run_test, test=test):
                run_test(test, **kwargs)

            setattr(BackendTests, f'test_{test}', run_test_closure)

        test_loader = unittest.defaultTestLoader
        test_suite = test_loader.loadTestsFromTestCase(BackendTests)
        test_runner = unittest.TextTestRunner(verbosity=log.verbosity)

        return test_runner.run(test_suite)

    def _parse_test_inputs(self):
        test_inputs = []

        for test_input_file in os.listdir(self._test_input_dir):
            m = re.match(self.TEST_INPUT_PATTERN, test_input_file)

            if m is None:
                raise ValueError(f"failed to parse test input file '{test_input_file}'")

            test = m[1]

            test_inputs.append(test)

        log.debug("found test inputs:")
        for test in test_inputs:
            log.debug(f"* {test}")

        return sorted(test_inputs)

    def _parse_tests(self, test_inputs):
        tests = []

        for test_file in os.listdir(self._test_source_dir()):
            m = re.match(self.TEST_PATTERN, test_file)

            if m is None:
                raise ValueError(f"failed to parse test file '{test_file}'")

            test = m[1]

            if test not in test_inputs:
                raise ValueError(f"unmatched test '{test}'")

            tests.append(test)

        log.debug("found tests:")
        for test in tests:
            log.debug(f"* {test}")

        return sorted(tests)

    def _compile_c_test(self, test, **kwargs):
        cpp_src = self._test_wrapper(test, ext='.cc')
        c_src = self._test_source(test, ext='.c')

        cpp_obj = self._test_output(test, ext='_cpp.o')
        c_obj = self._test_output(test, ext='_c.o')

        test_bin = self._test_output(test, '_bin')

        self._compile(cpp_src,
                      cpp_obj,
                      includes=[self._test_input_dir, self._test_output_dir()],
                      **kwargs)

        self._compile(c_src,
                      c_obj,
                      includes=[self._test_output_dir()],
                      compiler='clang',
                      **kwargs)

        self._link([cpp_obj, c_obj], test_bin, **kwargs)

    def _compile_rust_test(self, test, **kwargs):
        cpp_src = self._test_wrapper(test, ext='.cc', postfix='_c')
        cpp_obj = self._test_output(test, ext='.o', postfix='_c')
        cpp_lib = self._test_output(test, ext='.a', prefix='lib', postfix='_c')

        rust_wrap_src = self._test_wrapper(test, ext='.rs')
        rust_test_src = self._test_source(test, ext='.rs')

        self._compile(cpp_src,
                      cpp_obj,
                      includes=[self._test_input_dir, self._test_output_dir()],
                      action=['-c', '-fPIC'],
                      **kwargs)

        self._subprocess(['ar', 'rcs', cpp_lib, cpp_obj])

        self._subprocess(['ln', '-sf', rust_wrap_src, self._test_source_dir()])

        self._subprocess(['rustc', rust_test_src,
                          '--deny', 'warnings',
                          '-lstdc++',
                          '-L', self._test_output_dir(),
                          '--out-dir', self._test_output_dir()])

        self._subprocess(['rm', os.path.join(self._test_source_dir(),
                                             os.path.basename(rust_wrap_src))])

    def _compile_lua_test(self, test, **kwargs):
        mod_src = self._test_wrapper(test, ext='.cc')
        mod = self._test_output(test, ext='.so')

        self._compile(mod_src,
                      mod,
                      includes=[kwargs['lua_include_dir'], self._test_input_dir],
                      action=['-shared', '-fPIC'],
                      **kwargs)

    def _run_c_test(self, test, **kwargs):
        test_bin = self._test_output(test, ext='_bin')

        if kwargs.get('run_valgrind') == 'yes':
            run = self._valgrind_subprocess
        else:
            run = self._subprocess

        run([test_bin], quiet=True)

    def _run_rust_test(self, test, **kwargs):
        test_bin = self._test_output(test, ext='')

        if kwargs.get('run_valgrind') == 'yes':
            run = self._valgrind_subprocess
        else:
            run = self._subprocess

        run([test_bin], quiet=True)

    def _run_lua_test(self, test, **kwargs):
        test_lua = self._test_source(test, ext='.lua')

        lua_cpath = self._test_output(test, ext='.so')

        if kwargs.get('run_valgrind') == 'yes':
            run = self._valgrind_subprocess
        else:
            run = self._subprocess

        env = os.environ
        env['LUA_CPATH'] = lua_cpath

        run([kwargs['lua'], test_lua], env=env, quiet=True)

    def _test_source_dir(self):
        return os.path.join(self._test_root_dir, self._test_lang)

    def _test_output_dir(self):
        return os.path.join(self._test_output_root_dir, self._test_lang)

    def _test_source(self, test, ext):
        return os.path.join(self._test_source_dir(), f"test_{test}{ext}")

    def _test_wrapper(self, test, ext, prefix='', postfix=None):
        if postfix is None:
            postfix = '_' + self._test_lang

        return os.path.join(self._test_output_dir(), f"{prefix}test_{test}{postfix}{ext}")

    def _test_input(self, test):
        return os.path.join(self._test_input_dir, f"test_{test}.hpp")

    def _test_output(self, test, ext, prefix='', postfix=''):
        return os.path.join(self._test_output_dir(), f"{prefix}test_{test}{postfix}{ext}")

    def _compile(self, src, obj, **kwargs):
        compiler = kwargs.get('compiler', 'clangpp')
        action = kwargs.get('action', ['-c'])

        args = [
            kwargs[compiler],
            *self._clang_args(compiler, **kwargs),
            *action, src,
            '-o', obj
        ]

        includes = kwargs.get('includes', []) + [kwargs['cppbind_extra_dir']]

        for include in includes:
            args += ['-I', include]

        self._subprocess(args)

    def _compile_extra(self, extra_srcs, **kwargs):
        extra_objs = []

        for extra_src in extra_srcs:
            extra_src = os.path.join(kwargs['cppbind_extra_dir'], extra_src)

            extra_stem = os.path.splitext(os.path.basename(extra_src))[0]
            extra_obj = self._test_output(extra_stem, ext='.o')
            extra_objs.append(extra_obj)

            self._compile(extra_src, extra_obj, **kwargs)

        return extra_objs

    @classmethod
    def _link(cls, objs, out, **kwargs):
        compiler = kwargs.get('compiler', 'clangpp')

        args = [
            kwargs[compiler],
            *cls._clang_args(compiler, **kwargs),
            '-o', out
        ]

        args += objs

        cls._subprocess(args)

    @staticmethod
    def _clang_args(which, **kwargs):
        args = kwargs.get('clang_common_args', []) + \
               kwargs.get(f'clang_{which}_args', [])

        if which == 'cppbind':
            return [f"--extra-arg=-{arg}" for arg in args]
        else:
            return [f"-{arg}" for arg in args]

    @staticmethod
    def _subprocess(args, **kwargs):
        quiet = kwargs.pop('quiet', False)

        if not quiet:
            log.debug("running subprocess: " + ' '.join(args))

        run = partial(subprocess.run, args, check=True, **kwargs)

        if not quiet and log.verbosity > 1:
            run(stdin=subprocess.PIPE, stderr=subprocess.PIPE)
        else:
            run()

    @classmethod
    def _valgrind_subprocess(cls, args, **kwargs):
        valgrind_args = [
            'valgrind',
            '--tool=memcheck',
            '--leak-check=full',
            '--show-leak-kinds=all',
            '--error-exitcode=1'
        ]

        cls._subprocess(valgrind_args + args, **kwargs)


class BackendTestTimer:
    def __init__(self, name):
        self._name = name

    def __enter__(self):
        self._start = self._time()

    def __exit__(self, type, value, traceback):
        time = self._time() - self._start

        log.debug(f"timer '{self._name}' ran in: {time:e} seconds")

    @staticmethod
    def _time():
        return default_timer()


def list_tests(**kwargs):
    generator = BackendTestGenerator(**kwargs)

    print('\n'.join(generator.list_tests()))


def run_tests(**kwargs):
    generator = BackendTestGenerator(**kwargs)

    with BackendTestTimer('wrap') as t:
        generator.wrap_tests(**kwargs)

    with BackendTestTimer('compile') as t:
        generator.compile_tests(**kwargs)

    with BackendTestTimer('run') as t:
        result = generator.run_tests(**kwargs)

    if not result.wasSuccessful():
        raise RuntimeError("tests failed")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    sub_parsers = parser.add_subparsers(dest='sub_parser')
    list_parser = sub_parsers.add_parser('list', help="list available tests")
    run_parser = sub_parsers.add_parser('run', help="run tests")

    parser.add_argument('test_root_dir', metavar='TEST_ROOT_DIR',
                        help="test root directory")
    parser.add_argument('test_language', choices=['c', 'rust', 'lua'],
                        help="backend languages for which to run tests")
    parser.add_argument('-v', '--verbosity', type=int, default=0,
                        help="more verbose output")

    run_parser.add_argument('--single-test',
                            help="only run specific test")
    run_parser.add_argument('--cppbind', default='cppbind',
                            help="cppbind executable")
    run_parser.add_argument('--cppbind-extra-dir', default='.',
                            help="cppbind extra include/source file directory")
    run_parser.add_argument('--clang', default='clang',
                            help="clang executable (C)")
    run_parser.add_argument('--clangpp', default='clang++',
                            help="clang executable (C++)")
    run_parser.add_argument('--clang-common-args', nargs="+",
                            help="extra clang arguments (common)")
    run_parser.add_argument('--clang-cppbind-args', nargs="+",
                            help="extra clang arguments (cppbind)")
    run_parser.add_argument('--clang-clang-args', nargs="+",
                            help="extra clang arguments (C)")
    run_parser.add_argument('--clang-clangpp-args', nargs="+",
                            help="extra clang arguments (C++)")
    run_parser.add_argument('--run-valgrind', choices=['yes', 'no'],
                            help="run tests under valgrind and fail on leaks")
    run_parser.add_argument('--valgrind', default='valgrind',
                            help="valgrind executable")
    run_parser.add_argument('--lua', default='lua',
                            help="lua executable")
    run_parser.add_argument('--lua-include-dir', default='/usr/include',
                             help="lua include directory")

    args = parser.parse_args()

    # configure logger
    logger_set_verbosity(log, args.verbosity)

    # run tests
    kwargs = vars(args)

    if args.sub_parser == 'list':
        list_tests(**kwargs)

    elif args.sub_parser == 'run':
        run_tests(**kwargs)
