#!/usr/bin/env python3

import argparse
import logging
import os
import re
import subprocess
import sys
import unittest

from functools import partial


def logger_create(name):
    logging.basicConfig(format='%(levelname)s %(message)s')

    return logging.getLogger(name)


def logger_set_verbosity(logger, verbosity):
    logger.verbosity = verbosity

    if verbosity > 1:
        logger.setLevel(logging.DEBUG)
    elif verbosity > 0:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.WARN)


log = logger_create('backend_testrunner')


class BackendTestGenerator:
    INPUT_DIR = '_input'
    OUTPUT_ROOT_DIR = '_output'

    TEST_INPUT_PATTERN = 'test_(.*)\..*'
    TEST_PATTERN = 'test_(.*)\..*'

    def __init__(self, **kwargs):
        self._test_lang = kwargs['test_language']

        self._test_root_dir = kwargs['test_root_dir']

        self._test_input_dir = os.path.join(self._test_root_dir,
                                            self.INPUT_DIR)

        self._test_output_root_dir = os.path.join(self._test_root_dir,
                                                  self.OUTPUT_ROOT_DIR)

        single_test = kwargs.get('single_test')

        if single_test is not None:
            self._tests = [single_test]
        else:
            self._tests = self._parse_tests(self._parse_test_inputs())

    def list_tests(self):
        return self._tests

    def wrap_tests(self, **kwargs):
        log.info("wrapping test inputs...")

        output_dir = self._test_output_dir()

        if not os.path.isdir(output_dir):
            os.mkdir(output_dir)

        for test in self._tests:
            test_input = self._test_input(test)

            log.debug(f"wrapping {test_input}...")

            self._subprocess([
                kwargs['cppbind'],
                test_input,
                '--namespace', 'test',
                '--backend', f'{self._test_lang}',
                '--output-directory', f'{output_dir}',
                '--'
            ])

    def compile_tests(self, **kwargs):
        log.info("compiling tests...")

        if self._test_lang == 'c':
            compile_cmd = self._compile_c_test
        elif self._test_lang == 'lua':
            compile_cmd = self._compile_lua_test

        for test in self._tests:
            log.debug(f"compiling {test}...")

            compile_cmd(test, **kwargs)

    def run_tests(self, **kwargs):
        log.info("running tests...")

        class BackendTests(unittest.TestCase):
            __qualname__ = f'BackendTests'

        if self._test_lang == 'c':
            run_test = self._run_c_test
        elif self._test_lang == 'lua':
            run_test = self._run_lua_test

        for test in self._tests:
            def run_test_closure(_, run_test=run_test, test=test):
                run_test(test, **kwargs)

            setattr(BackendTests, f'test_{test}', run_test_closure)

        test_loader = unittest.defaultTestLoader
        test_suite = test_loader.loadTestsFromTestCase(BackendTests)
        test_runner = unittest.TextTestRunner(verbosity=log.verbosity)

        return test_runner.run(test_suite)

    def _parse_test_inputs(self):
        test_inputs = []

        for test_input_file in os.listdir(self._test_input_dir):
            m = re.match(self.TEST_INPUT_PATTERN, test_input_file)

            if m is None:
                raise ValueError(f"failed to parse test input file '{test_input_file}'")

            test = m[1]

            test_inputs.append(test)

        log.debug("found test inputs:")
        for test in test_inputs:
            log.debug(f"* {test}")

        return sorted(test_inputs)

    def _parse_tests(self, test_inputs):
        tests = []

        for test_file in os.listdir(self._test_source_dir()):
            m = re.match(self.TEST_PATTERN, test_file)

            if m is None:
                raise ValueError(f"failed to parse test file '{test_file}'")

            test = m[1]

            if test not in test_inputs:
                raise ValueError(f"unmatched test '{test}'")

            tests.append(test)

        log.debug("found tests:")
        for test in tests:
            log.debug(f"* {test}")

        return sorted(tests)

    def _compile_c_test(self, test, **kwargs):
        cpp_src = self._test_wrapper(test, ext='.cpp')
        c_src = self._test_source(test, ext='.c')

        cpp_obj = self._test_output(test, ext='_cpp.o')
        c_obj = self._test_output(test, ext='_c.o')

        test_bin = self._test_output(test, '_bin')

        self._subprocess([
            kwargs['clangpp'],
            *kwargs['clang_args'],
            '-c', cpp_src,
            '-o', cpp_obj,
            '-I', self._test_input_dir,
            '-I', self._test_output_dir()
        ])

        self._subprocess([
            kwargs['clang'],
            *kwargs['clang_args'],
            '-c', c_src,
            '-o', c_obj,
            '-I', self._test_output_dir()
        ])

        self._subprocess([
            kwargs['clangpp'],
            *kwargs['clang_args'],
            cpp_obj,
            c_obj,
            '-o', test_bin
        ])

    def _compile_lua_test(self, test, **kwargs):
        mod_src = self._test_wrapper(test, ext='.cpp')
        mod = self._test_output(test, ext='.so')

        self._subprocess([
            kwargs['clangpp'],
            *kwargs['clang_args'],
            '-shared', '-fPIC', mod_src,
            '-o', mod,
            '-I', kwargs['lua_include_dir'],
            '-I', self._test_input_dir
        ])

    def _run_c_test(self, test, **kwargs):
        test_bin = self._test_output(test, ext='_bin')

        self._subprocess(test_bin, quiet=True)

    def _run_lua_test(self, test, **kwargs):
        test_lua = self._test_source(test, ext='.lua')

        lua_cpath = self._test_output(test, ext='.so')

        self._subprocess([kwargs['lua'], test_lua],
                         env={'LUA_CPATH': lua_cpath},
                         quiet=True)

    def _test_source_dir(self):
        return os.path.join(self._test_root_dir, self._test_lang)

    def _test_output_dir(self):
        return os.path.join(self._test_output_root_dir, self._test_lang)

    def _test_source(self, test, ext):
        return os.path.join(self._test_source_dir(), f"test_{test}{ext}")

    def _test_wrapper(self, test, ext):
        return os.path.join(self._test_output_dir(), f"test_{test}_{self._test_lang}{ext}")

    def _test_input(self, test):
        return os.path.join(self._test_input_dir, f"test_{test}.hpp")

    def _test_output(self, test, ext):
        return os.path.join(self._test_output_dir(), f"test_{test}{ext}")

    @staticmethod
    def _subprocess(args, quiet=False, **kwargs):
        if not quiet:
            log.debug("running subprocess: " + ' '.join(args))

        run = partial(subprocess.run, args, check=True, **kwargs)

        if not quiet and log.verbosity > 1:
            run(stdin=subprocess.PIPE, stderr=subprocess.PIPE)
        else:
            run()


def list_tests(**kwargs):
    generator = BackendTestGenerator(**kwargs)

    print('\n'.join(generator.list_tests()))


def run_tests(**kwargs):
    generator = BackendTestGenerator(**kwargs)

    generator.wrap_tests(**kwargs)

    generator.compile_tests(**kwargs)

    result = generator.run_tests(**kwargs)

    if not result.wasSuccessful():
        raise RuntimeError("tests failed")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    sub_parsers = parser.add_subparsers(dest='sub_parser')
    list_parser = sub_parsers.add_parser('list', help="list available tests")
    run_parser = sub_parsers.add_parser('run', help="run tests")

    parser.add_argument('test_root_dir', metavar='TEST_ROOT_DIR',
                        help="test root directory")
    parser.add_argument('test_language', choices=['c', 'lua'],
                        help="backend languages for which to run tests")
    parser.add_argument('-v', '--verbosity', type=int, default=0,
                        help="more verbose output")

    run_parser.add_argument('--single-test',
                            help="only run specific test")
    run_parser.add_argument('--cppbind', default='cppbind',
                            help="cppbind executable")
    run_parser.add_argument('--clang', default='clang',
                            help="clang executable (C)")
    run_parser.add_argument('--clangpp', default='clang++',
                            help="clang executable (C++)")
    run_parser.add_argument('--clang-args', type=lambda arg: f'-{arg}', nargs="+",
                            help="extra clang arguments")
    run_parser.add_argument('--lua', default='lua',
                            help="lua executable")
    run_parser.add_argument('--lua-include-dir', default='/usr/include',
                             help="lua include directory")

    args = parser.parse_args()

    # configure logger
    logger_set_verbosity(log, args.verbosity)

    # run tests
    kwargs = vars(args)

    if args.sub_parser == 'list':
        list_tests(**kwargs)

    elif args.sub_parser == 'run':
        run_tests(**kwargs)
